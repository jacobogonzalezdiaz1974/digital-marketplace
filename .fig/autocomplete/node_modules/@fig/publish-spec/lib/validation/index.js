var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import prompts from "prompts";
export * from "./validators/index.js";
/**
 * `Validate` performs some validation logic sequencially each time returning the validated and sanitized option
 * If interactive mode is run validate also creates a prompt queue that will get executed to ask options to the user in real time
 * > NOTE: Order of validators in the chain matters!
 */
export function validate(options) {
    const validators = [];
    function exec() {
        return __awaiter(this, void 0, void 0, function* () {
            const interactiveQuestions = [];
            const validatedOptions = {};
            const validated = yield Promise.all(validators.map((v) => v(options)));
            for (const item of validated) {
                const [d, q] = item;
                if (q) {
                    interactiveQuestions.push(...q);
                }
                else {
                    Object.assign(validatedOptions, d);
                }
            }
            if (interactiveQuestions.length > 0) {
                const questionsResponse = yield prompts(interactiveQuestions);
                Object.assign(validatedOptions, questionsResponse);
            }
            return validatedOptions;
        });
    }
    function validator(val) {
        validators.push(val);
        return {
            validator,
            exec,
        };
    }
    return {
        validator,
        exec,
    };
}

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { tryParseTokenFromCredentials } from "../../credentials.js";
import { value, questions } from "./helpers.js";
export const validateToken = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { token, interactive } = options;
    if (token)
        return value({ token });
    if (process.env.FIG_API_TOKEN)
        return value({ token: process.env.FIG_API_TOKEN });
    // try to read the token from the config file
    try {
        return value({ token: yield tryParseTokenFromCredentials() });
    }
    catch (error) {
        if (!interactive)
            throw error;
        return questions({
            type: "password",
            message: "A Fig API token to push a spec to a team but none was found, please insert one manually:",
            name: "token",
            validate: (v) => { var _a; return (_a = !!v) !== null && _a !== void 0 ? _a : "A Token is required to push the spec to a team"; },
        });
    }
});

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { questions, value } from "./helpers.js";
export const validateIsScript = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { isScript, interactive } = options;
    if (isScript || !interactive)
        return value({ isScript: Boolean(isScript) });
    return questions({
        type: "select",
        name: "isScript",
        message: "Is this spec adding completions to a local script (eg. ./scripts/my-script.sh)",
        choices: [
            { title: "No", value: false, selected: true, description: "(default)" },
            { title: "Yes", value: true },
        ],
    });
});

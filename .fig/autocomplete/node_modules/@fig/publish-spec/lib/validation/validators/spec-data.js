var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { value, questions } from "./helpers.js";
import { ValidationError, ValidationErrorEnum } from "../../errors.js";
import { DEFAULT_OPTIONS } from "../../constants.js";
export const validateSpecData = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { binaryPath, specPath, interactive, framework, subcommandName } = options;
    if (!binaryPath && !specPath) {
        if (interactive) {
            return questions([
                {
                    name: "mode",
                    message: "Do you want to generate the spec now from a command or add a path to a local spec TypeScript file?",
                    type: "select",
                    choices: [
                        {
                            title: "I want to generate the spec",
                            value: "command",
                        },
                        {
                            title: "I want to specify a path to a file",
                            value: "filepath",
                        },
                    ],
                },
                {
                    type: (_, prevValues) => (prevValues.mode === "filepath" ? "text" : null),
                    name: "specPath",
                    // TODO(fedeci): add TIP about passing this option via the flag and also using interactive mode
                    message: "Add the path to a local spec:",
                },
                {
                    type: (_, prevValues) => (prevValues.mode === "command" ? "text" : null),
                    name: "command",
                    message: "Add the path to a local spec:",
                },
            ]);
        }
        throw new ValidationError(ValidationErrorEnum.noSpecPassed);
    }
    if (binaryPath) {
        return value({
            command: framework || subcommandName
                ? `${binaryPath} ${subcommandName !== null && subcommandName !== void 0 ? subcommandName : DEFAULT_OPTIONS.subcommandName}`
                : binaryPath,
            specPath,
        });
    }
    return value({ specPath });
});

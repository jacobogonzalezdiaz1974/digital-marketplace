var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { value, questions } from "./helpers.js";
import { exec } from "../../utils.js";
export const validateTeam = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { team, interactive } = options;
    if (team || !interactive)
        return value({ team });
    try {
        const availableTeams = (yield exec("fig team --list"))
            .trim()
            .split("\n")
            .map((name) => ({
            title: name,
            value: name,
        }));
        return questions([
            {
                type: "select",
                message: "Would you like to publish the spec:",
                choices: [
                    {
                        title: "For personal use",
                        value: "p",
                    },
                    {
                        title: "For a team",
                        value: "t",
                    },
                ],
                name: "teamScopeInfo",
            },
            {
                type: (prev) => (prev === "t" ? "select" : false),
                message: "Choose a team to publish the spec to:",
                name: "team",
                choices: availableTeams,
            },
        ]);
    }
    catch (_a) {
        return value({ team: "" });
    }
});

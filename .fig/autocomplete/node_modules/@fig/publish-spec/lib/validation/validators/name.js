var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import path from "path";
import { ValidationError, GenericErrorEnum, ValidationErrorEnum } from "../../errors.js";
import { validateSpecName } from "../../utils.js";
import { value, questions } from "./helpers.js";
export const validateName = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { name: optionalName, specPath, interactive } = options;
    let name = optionalName;
    try {
        if (!name) {
            if (specPath) {
                // if name is missing we extract it from the optional spec-name
                // NOTE: this won't work correctly for spec names that require being nested under a subfolder
                // e.g. `@withfig/autocomplete-tools.ts`
                name = path.basename(specPath, ".ts");
            }
            else {
                throw new ValidationError(GenericErrorEnum.missingName);
            }
        }
        validateSpecName(name);
        return value({ name });
    }
    catch (error) {
        if (!interactive)
            throw error;
        return questions({
            type: "text",
            message: "Choose a name for the spec:",
            name: "name",
            validate: (v) => { var _a; return (_a = !v.includes(" ")) !== null && _a !== void 0 ? _a : ValidationErrorEnum.nameWithSpace; },
        });
    }
});

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCompletionSpec = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const picocolors_1 = __importDefault(require("picocolors"));
const fileContent = (name) => `const completionSpec: Fig.Spec = {
  name: "${name}",
  description: "",
  subcommands: [{
    name: "my_subcommand",
    description: "Example subcommand",
    subcommands: [{
      name: "my_nested_subcommand",
      description: "Nested subcommand, example usage: '${name} my_subcommand my_nested_subcommand'"
    }],
  }],
  options: [{
    name: ["--help", "-h"],
    description: "Show help for ${name}",
  }],
  // Only uncomment if ${name} takes an argument
  // args: {}
};
export default completionSpec;`;
function createCompletionSpec(specName, autocompleteFolder) {
    const sanitizedSpecName = specName.replace(" ", "-");
    const filePath = path_1.default.join(autocompleteFolder, `${sanitizedSpecName}.ts`);
    const dirName = path_1.default.dirname(filePath); // we do not use parentDir directly cause specName may be nested e.g. `aws/spec`
    if (fs_1.default.existsSync(filePath)) {
        console.log(picocolors_1.default.red("This completion spec already exists"));
        console.log(picocolors_1.default.bold(`Start editing it from the src/${sanitizedSpecName}.ts now!`));
        return;
    }
    try {
        fs_1.default.mkdirSync(dirName, { recursive: true });
        fs_1.default.writeFileSync(filePath, fileContent(sanitizedSpecName));
        console.log(picocolors_1.default.green(`Successfully created the new spec ${sanitizedSpecName}`));
        console.log(`Start editing it at ${picocolors_1.default.bold(`src/${sanitizedSpecName}.ts`)}!`);
    }
    catch (_a) {
        throw new Error(`An error occurred while creating the new "${sanitizedSpecName}" spec.`);
    }
}
exports.createCompletionSpec = createCompletionSpec;

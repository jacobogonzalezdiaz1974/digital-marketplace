"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = void 0;
const commander_1 = require("commander");
const path_1 = __importDefault(require("path"));
const picocolors_1 = __importDefault(require("picocolors"));
const create_boilerplate_1 = require("./create-boilerplate");
const create_spec_1 = require("./create-spec");
function runProgram(specName, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { here } = options;
        try {
            if (!here) {
                (0, create_boilerplate_1.createBoilerplateFolder)();
                console.log("----");
            }
            (0, create_spec_1.createCompletionSpec)(specName, here ? process.cwd() : path_1.default.resolve(process.cwd(), ".fig", "autocomplete", "src"));
        }
        catch (error) {
            console.log(picocolors_1.default.red(error.message));
            process.exit(1);
        }
    });
}
exports.program = new commander_1.Command("create-completion-spec")
    .description("Setup fig folder and create spec with the given name")
    .arguments("<name>")
    .option("--here", "Set if the spec should be created in the current folder")
    .action(runProgram);
